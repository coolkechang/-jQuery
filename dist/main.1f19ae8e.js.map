{"version":3,"sources":["main.js"],"names":["jQuery","addClass","api1","api2","find","oldApi","end","x","each","div","console","log","y","parent","print","children"],"mappings":"AAAAA,MAAM,CAAC,OAAD,CAAN,CAAgBC,QAAhB,CAAyB,KAAzB,EAAgCA,QAAhC,CAAyC,MAAzC,GACA;AACA;AACA;AACA;;AACA;;;;;;;;AAQA,IAAMC,IAAI,GAAGF,MAAM,CAAC,QAAD,CAAnB;AACA,IAAMG,IAAI,GAAGD,IAAI,CAACE,IAAL,CAAU,QAAV,EAAoBH,QAApB,CAA6B,KAA7B,EAAoCA,QAApC,CAA6C,OAA7C,CAAb,EACA;;AACA,IAAMI,MAAM,GAAGF,IAAI,CAACG,GAAL,GAAWL,QAAX,CAAoB,QAApB,CAAf;AAEA,IAAMM,CAAC,GAAGP,MAAM,CAAC,QAAD,CAAN,CAAiBI,IAAjB,CAAsB,QAAtB,CAAV;AACAG,CAAC,CAACC,IAAF,CAAO,UAACC,GAAD;AAAA,SAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,CAAP;AACA;;;;;;;AAOA,IAAMG,CAAC,GAAGZ,MAAM,CAAC,QAAD,CAAhB;AACAY,CAAC,CAACC,MAAF,GAAWC,KAAX;AACAF,CAAC,CAACG,QAAF,GAAaD,KAAb","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["jQuery('.test').addClass('red').addClass('blue')\r\n//jquery 不返回 elements , 返回的是 api 对象\r\n//因为jQuery是全局变量，这里是window.jquery的简写\r\n//addClass 的作用就是遍历所有刚才获取的元素，返回前面的東西，這裡是api\r\n//链式操作：用api调了一个函数，这个函数返回了前面的对象，于是可以继续调 addClass 。能如此做到的原因就是“ return 对象  ”;如过“ return null ”,那么就只加一个，链不下去了。\r\n/*\r\n上述代码是以下代码的简写，省略了声明\r\n\r\nconst api = window.jQuery(\".test\"); \r\napi.addClass(\"red\").addClass(\"blue\"); \r\n\r\n*/\r\n\r\nconst api1 = jQuery('.test1')\r\nconst api2 = api1.find('.child').addClass('red').addClass('green')\r\n//jQuery('.test1').find('.child').addClass('red').addClass('green');\r\nconst oldApi = api2.end().addClass('yellow')\r\n\r\nconst x = jQuery('.test2').find('.child')\r\nx.each((div) => console.log(div))\r\n/*\r\n这句代码表示打印出x对应的元素。（对应jQuery.js中 each部分）\r\nx是可以操作child的api ; \r\n(div) => console.log(div) 就是函数fn，它会被each调用\r\ndiv是参数，对应着elements[i]。可以改成xy等\r\n*/\r\n\r\nconst y = jQuery('.test2')\r\ny.parent().print()\r\ny.children().print()\r\n"]}